#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D DuDvMap;

uniform float moveFactor;

const float waveStrength = 0.02;

void main(void) {

    vec2 normalizedDeviceSpace = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
    vec2 refractionTextureCoords = vec2(normalizedDeviceSpace.x, normalizedDeviceSpace.y);
    vec2 reflectionTextureCoords = vec2(normalizedDeviceSpace.x, -normalizedDeviceSpace.y);

    vec2 distortion1 = waveStrength * (texture(DuDvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 2.0 - 1.0);
    vec2 distortion2 = waveStrength * (texture(DuDvMap, vec2(-textureCoords.x + moveFactor, textureCoords.y + moveFactor)).rg * 2.0 - 1.0);
    vec2 totalDistortion = distortion1 + distortion2;

    refractionTextureCoords += totalDistortion;
    reflectionTextureCoords += totalDistortion;

    refractionTextureCoords = clamp(refractionTextureCoords, 0.001, 0.999);
    reflectionTextureCoords.x = clamp(reflectionTextureCoords.x, 0.001, 0.999);
    reflectionTextureCoords.y = clamp(reflectionTextureCoords.x, -0.999, -0.001);

    vec4 reflectionColor = texture(reflectionTexture, reflectionTextureCoords);
    vec4 refractionColor = texture(refractionTexture, refractionTextureCoords);

    vec3 viewVector = normalize(toCameraVector);
    float refractiveFactor = dot(viewVector, vec3(0.0, 1.0, 0.0));
    refractiveFactor = pow(refractiveFactor, 0.8);

	out_Color = mix(reflectionColor, refractionColor, refractiveFactor);
	out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 1.0), 0.2);

}